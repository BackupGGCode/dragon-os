#summary The design of the kernel
#labels Featured,Phase-Design
=Overview=
The DragonOS kernel ("Colonel") is the engine of DragonOS. All of the other processes are basically peripherals and luxuries. None of them would be of any use without Colonel. This document aims to perfectly describe the design and implementation goals (whether acheived or not) of Colonel. It elaborates on the design decisions and the plans of Colonel.  Because DragonOS is meant to be used as a gaming operating system, Colonel has given graphics, sound, and input development priority over general application development. It is important to note that file system and full architecture support is of a higher priority than that.

=General Design=
Colonel is a monolithic/hybrid kernel for DragonOS. Colonel barely does anything at the highest privilege. Rather, it sends sub-processes that exist in user land to handle as many tasks as possible. Colonel follows a microkernel design to stay as secure as possible. To keep performance fairly high, Colonel is optimized where ever possible to bring the best performance while remaining at the highest level of security.  Colonel is intended to have full support for the Intel architectures (32-bit, 64-bit), MIPS, ARM, and SPARC.  Colonel enters into a graphical mode as soon as possible.

=Drivers=
Drivers are ELF executables that are loaded into their own address space and handled via the Extensible Driver Interface (EDI). This allows drivers to be shared with hobby based operating systems. [Currently, AxioSoft is investigating the use of EDI in a microkernel. If it is not feasible, EDI will be forked.]  NOTE: Drivers are always launched as services. (Read "Applications" below.)

=Applications=
Applications are dealt with in a special way. Following an Android OS styled model, applications are split into different types: Activities, and services. An activity is an app which takes up screen space (and thus has its own workspace), a service is an app which does not take up any screen space. When an application is launched, it is either launched as an activity, or as a service. When an application is launched as an activity, it is given a space on the screen just for it. This takes up the whole screen except for the bar at the top. (Read dragon_design.txt for more information.)

_INCOMPLETE DOCUMENT_

*NOTE* VFS section coming in a few hours.